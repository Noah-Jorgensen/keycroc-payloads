ATTACKMODE HID STORAGE
REM TITLE: Nim
REM AUTHOR: Cribbit
REM DESCRIPTION: play a game of nim with a ducky
REM Props: Korben & Bert van Dam
DELAY 2000
EXTENSION TRANSLATE
    REM VERSION 1.0

    REM This extension acts as a library or collection of helper functions
    REM to work with converting variables in your payloads.
    REM WHY:
    REM Of the many ways to get information about the state of your payload 
    REM is by injecting static strings effectively as debugging prints
    REM However, given the non-static nature of payloads using variables in
    REM DuckyScript 3.0 - the ability to decode variables during payload 
    REM execution and print (inject) representations of their current state 
    REM can often be a critically helpful development and debugging tool.

    REM Available Functions:
    REM TRANSLATE_INT() - var to decimal string - set $INPUT prior to call
    REM TRANSLATE_HEX() - var to hexidecimal string - set $INPUT prior to call
    REM TRANSLATE_BINARY() - var to binary string - set $INPUT prior to call
    REM TRANSLATE_BOOL() - var to boolean string - set $INPUT prior to call

    REM USAGE:
    REM set $INPUT to desired var
    REM call the correct translate_ function for the expected data type e.g.
    REM    VAR $myVar = 1234
    REM    $INPUT = $myVar
    REM    TRANSLATE_INT()
    REM    REM the above code will inject 1234

    REM begin extension variables
    DEFINE PRINT_INT 0
    DEFINE PRINT_HEX 1
    VAR $DIGIT_PRINT_MODE = PRINT_INT
    VAR $D = 0
    VAR $IN = 0
    VAR $INPUT = 0
    VAR $MOD = 0
    VAR $P = FALSE
    VAR $NL = TRUE
    REM end extension variables

    REM REQUIRED for INT/HEX - convert int to char
    FUNCTION PRINTDIGIT()
        IF ($D == 0) THEN
            STRING 0
        ELSE IF ($D == 1) THEN
            STRING 1
        ELSE IF ($D == 2) THEN
            STRING 2
        ELSE IF ($D == 3) THEN
            STRING 3
        ELSE IF ($D == 4) THEN
            STRING 4
        ELSE IF ($D == 5) THEN
            STRING 5
        ELSE IF ($D == 6) THEN
            STRING 6
        ELSE IF ($D == 7) THEN
            STRING 7
        ELSE IF ($D == 8) THEN
            STRING 8
        ELSE IF ($D == 9) THEN
            STRING 9
        ELSE IF ($DIGIT_PRINT_MODE == PRINT_HEX) THEN
            IF ($D == 10) THEN
                STRING A
            ELSE IF ($D == 11) THEN
                STRING B
            ELSE IF ($D == 12) THEN
                STRING C
            ELSE IF ($D == 13) THEN
                STRING D
            ELSE IF ($D == 14) THEN
                STRING E
            ELSE IF ($D == 15) THEN
                STRING F
            END_IF
        ELSE
            STRING ?
        END_IF
    END_FUNCTION

    REM REQUIRED for INT/HEX- consumes a character / place from the input
    FUNCTION CONSUME()
        $D = 0
        WHILE ($INPUT >= $MOD)
            $D = ($D + 1)
            $INPUT = ($INPUT - $MOD)
        END_WHILE
        IF (($D > 0) || ($P == TRUE)) THEN
            $P = TRUE
            PRINTDIGIT()
        END_IF
    END_FUNCTION

    REM ENDIAN SWAPPER helper, (useful for working with VID/PID)
    FUNCTION SWAP_ENDIAN()
        $INPUT = ((($INPUT >> 8) & 0x00FF) | (($INPUT << 8) & 0xFF00))
    END_FUNCTION

    REM Translates a variable of presumed integer type and attempts to convert
    REM and inject a DECIMAL string representation
    FUNCTION TRANSLATE_INT() 
        $DIGIT_PRINT_MODE = PRINT_INT
        $P = FALSE
        IF ( $INPUT >= 10000) THEN
            $MOD = 10000
            CONSUME()
        END_IF
        IF (($INPUT >= 1000) || ($P == TRUE)) THEN
            $MOD = 1000
            CONSUME()
        END_IF
        IF (($INPUT >= 100) || ($P == TRUE)) THEN
            $MOD = 100
            CONSUME()
        END_IF
        IF (($INPUT >= 10) || ($P == TRUE)) THEN
            $MOD = 10
            CONSUME()
        END_IF()
        $D = $INPUT
        PRINTDIGIT()
        IF $NL THEN
            ENTER
        END_IF
    END_FUNCTION

    REM Translates a variable of presumed boolean type and attempts to convert
    REM and inject a BOOLEAN string representation
    FUNCTION TRANSLATE_BOOL()
        IF $INPUT THEN
            STRING TRUE
        ELSE
            STRING FALSE
        END_IF
        IF $NL THEN
            ENTER
        END_IF
    END_FUNCTION

    REM Translates a variable of presumed integer type and attempts to convert
    REM and inject a HEX string representation
    FUNCTION TRANSLATE_HEX()
        $DIGIT_PRINT_MODE = PRINT_HEX
        VAR $chars = 0
        VAR $d1 = 0
        VAR $d2 = 0
        VAR $d3 = 0
        VAR $d4 = 0
        WHILE ($INPUT > 0)
            IF ($chars == 0) THEN
                $d1 = ($INPUT % 16)
            ELSE IF ($chars == 1) THEN
                $d2 = ($INPUT % 16)
            ELSE IF ($chars == 2) THEN
                $d3 = ($INPUT % 16)
            ELSE IF ($chars == 3) THEN
                $d4 = ($INPUT % 16)
            END_IF
            $chars = ($chars + 1)
            $INPUT = ($INPUT / 16)
        END_WHILE
        VAR $i = 0
        STRING 0x
        IF ($chars == 0) THEN
            STRING 0x0000
        ELSE IF ($chars == 1) THEN
            STRING 000
            $D = $d1
            PRINTDIGIT()
        ELSE IF ($chars == 2) THEN
            STRING 00
            $D = $d2
            PRINTDIGIT()
            $D = $d1
            PRINTDIGIT()
        ELSE IF ($chars == 3) THEN
            STRING 0
            $D = $d3
            PRINTDIGIT()
            $D = $d2
            PRINTDIGIT()
            $D = $d1
            PRINTDIGIT()
        ELSE IF ($chars == 4) THEN
            STRING 0
            $D = $d4
            PRINTDIGIT()
            $D = $d3
            PRINTDIGIT()
            $D = $d2
            PRINTDIGIT()
            $D = $d1
            PRINTDIGIT()
        END_IF
        IF $NL THEN
            ENTER
        END_IF
    END_FUNCTION

    REM Translates a variable of presumed integer type and attempts to convert
    REM and inject a BINARY string representation
    FUNCTION TRANSLATE_BINARY()
        VAR $I = 16
        WHILE ( $I > 0 )
            $I = ($I - 1)
            IF (($INPUT & 0x8000) == 0 ) THEN
                STRING 0
            ELSE
                STRING 1
            END_IF
            $INPUT = ($INPUT << 1)
        END_WHILE
        IF $NL THEN
            ENTER
        END_IF
    END_FUNCTION
END_EXTENSION
REM Game Variables
VAR $MAX = 21
VAR $CAPS = $_CAPSLOCK_ON
VAR $SCROLL = $_SCROLLLOCK_ON
VAR $NUM = $_NUMLOCK_ON
VAR $PEBBLES = $MAX
VAR $TAKKEN = 0
VAR $RUNNING = TRUE
VAR $LASTPOS = 0
VAR $ROW = 1
VAR $COLUMN = 1
VAR $changed = FALSE
VAR $MOVE = 0
REM Array Variables
VAR $ARRAYINPUT = 0
VAR $ARRAYOUTPUT = 0
VAR $POS = 0 
VAR $WRITE = TRUE
REM Array Item Variables
VAR $ZERO = 0
VAR $ONE = 0
VAR $TWO = 0
VAR $THREE = 0
VAR $FOUR = 0
VAR $FIVE = 0
VAR $SIX = 0
VAR $SEVEN = 0
VAR $EIGHT = 0
VAR $NINE = 0
VAR $TEN = 0
VAR $ELEVEN = 0
VAR $TWELVE = 0
VAR $THIRTEEN = 0
VAR $FOURTEEN = 0
VAR $FIFTEEN = 0
VAR $SIXTEEN = 0
VAR $SEVENTEEN = 0
VAR $EIGHTEEN = 0
VAR $NINETEEN = 0
VAR $TWENTY = 0
VAR $TWENTYONE = 0
VAR $TWENTYTWO = 0
VAR $TWENTYTHREE = 0
VAR $TWENTYFOUR = 0
VAR $TWENTYFIVE = 0
VAR $TWENTYSIX = 0
VAR $TWENTYSEVEN = 0
VAR $TWENTYEIGHT = 0
VAR $TWENTYNINE = 0
VAR $THIRTY = 0
VAR $THIRTYONE = 0
VAR $THIRTYTWO = 0
VAR $THIRTYTHREE = 0
VAR $THIRTYFOUR = 0
VAR $THIRTYFIVE = 0
VAR $THIRTYSIX = 0
VAR $THIRTYSEVEN = 0
VAR $THIRTYEIGHT = 0
VAR $THIRTYNINE = 0
VAR $FORTY = 0
VAR $FORTYONE = 0
VAR $FORTYTWO = 0
VAR $FORTYTHREE = 0
VAR $FORTYFOUR = 0
VAR $FORTYFIVE = 0
VAR $FORTYSIX = 0
VAR $FORTYSEVEN = 0
VAR $FORTYEIGHT = 0
VAR $FORTYNINE = 0
VAR $FIFTY = 0
VAR $FIFTYONE = 0
VAR $FIFTYTWO = 0
VAR $FIFTYTHREE = 0
VAR $FIFTYFOUR = 0
VAR $FIFTYFIVE = 0
VAR $FIFTYSIX = 0
VAR $FIFTYSEVEN = 0
VAR $FIFTYEIGHT = 0
VAR $FIFTYNINE = 0
VAR $SIXTY = 0
VAR $SIXTYONE = 0
VAR $SIXTYTWO = 0

FUNCTION ARRAY() 
    IF ( $POS == 0 ) THEN 
        IF ($WRITE == TRUE) THEN
            $ZERO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $ZERO
        END_IF
    ELSE IF ( $POS == 1 ) THEN 
        IF ($WRITE == TRUE) THEN
            $ONE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $ONE
        END_IF
    ELSE IF ( $POS == 2 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWO
        END_IF
    ELSE IF ( $POS == 3 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THREE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THREE
        END_IF
    ELSE IF ( $POS == 4 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FOUR = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FOUR
        END_IF
    ELSE IF ( $POS == 5 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIVE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIVE
        END_IF
    ELSE IF ( $POS == 6 ) THEN 
        IF ($WRITE == TRUE) THEN
            $SIX = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $SIX
        END_IF
    ELSE IF ( $POS == 7 ) THEN 
        IF ($WRITE == TRUE) THEN
            $SEVEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $SEVEN
        END_IF
    ELSE IF ( $POS == 8 ) THEN 
        IF ($WRITE == TRUE) THEN
            $EIGHT = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $EIGHT
        END_IF
    ELSE IF ( $POS == 9 ) THEN 
        IF ($WRITE == TRUE) THEN
            $NINE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $NINE
        END_IF
    ELSE IF ( $POS == 10 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TEN
        END_IF
    ELSE IF ( $POS == 11 ) THEN 
        IF ($WRITE == TRUE) THEN
            $ELEVEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $ELEVEN
        END_IF
    ELSE IF ( $POS == 12 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWELVE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWELVE
        END_IF
    ELSE IF ( $POS == 13 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTEEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTEEN
        END_IF
    ELSE IF ( $POS == 14 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FOURTEEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FOURTEEN
        END_IF
    ELSE IF ( $POS == 15 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTEEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTEEN
        END_IF
    ELSE IF ( $POS == 16 ) THEN 
        IF ($WRITE == TRUE) THEN
            $SIXTEEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $SIXTEEN
        END_IF
    ELSE IF ( $POS == 17 ) THEN 
        STRINGLN i'm in 17
        IF ($WRITE == TRUE) THEN
            STRING Pre: 
            $INPUT = $SEVENTEEN
            TRANSLATE_INT()
            STRING Input: 
            $INPUT = $ARRAYINPUT
            TRANSLATE_INT()


            $SEVENTEEN = $ARRAYINPUT


            STRING Post: 
            $INPUT = $SEVENTEEN
            TRANSLATE_INT()
        ELSE
            STRINGLN i'm read
            $ARRAYOUTPUT = $SEVENTEEN
        END_IF
    ELSE IF ( $POS == 18 ) THEN 
        IF ($WRITE == TRUE) THEN
            $EIGHTEEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $EIGHTEEN
        END_IF
    ELSE IF ( $POS == 19 ) THEN 
        IF ($WRITE == TRUE) THEN
            $NINETEEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $NINETEEN
        END_IF
    ELSE IF ( $POS == 20 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTY = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTY
        END_IF
    ELSE IF ( $POS == 21 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYONE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYONE
        END_IF
    ELSE IF ( $POS == 22 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYTWO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYTWO
        END_IF
    ELSE IF ( $POS == 23 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYTHREE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYTHREE
        END_IF
    ELSE IF ( $POS == 24 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYFOUR = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYFOUR
        END_IF
    ELSE IF ( $POS == 25 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYFIVE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYFIVE
        END_IF
    ELSE IF ( $POS == 26 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYSIX = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYSIX
        END_IF
    ELSE IF ( $POS == 27 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYSEVEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYSEVEN
        END_IF
    ELSE IF ( $POS == 28 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYEIGHT = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYEIGHT
        END_IF
    ELSE IF ( $POS == 29 ) THEN 
        IF ($WRITE == TRUE) THEN
            $TWENTYNINE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $TWENTYNINE
        END_IF
    ELSE IF ( $POS == 30 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTY = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTY
        END_IF
    ELSE IF ( $POS == 31 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYONE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYONE
        END_IF
    ELSE IF ( $POS == 32 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYTWO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYTWO
        END_IF
    ELSE IF ( $POS == 33 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYTHREE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYTHREE
        END_IF
    ELSE IF ( $POS == 34 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYFOUR = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYFOUR
        END_IF
    ELSE IF ( $POS == 35 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYFIVE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYFIVE
        END_IF
    ELSE IF ( $POS == 36 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYSIX = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYSIX
        END_IF
    ELSE IF ( $POS == 37 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYSEVEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYSEVEN
        END_IF
    ELSE IF ( $POS == 38 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYEIGHT = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYEIGHT
        END_IF
    ELSE IF ( $POS == 39 ) THEN 
        IF ($WRITE == TRUE) THEN
            $THIRTYNINE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $THIRTYNINE
        END_IF
    ELSE IF ( $POS == 40 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTY = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTY
        END_IF
    ELSE IF ( $POS == 41 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYONE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYONE
        END_IF
    ELSE IF ( $POS == 42 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYTWO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYTWO
        END_IF
    ELSE IF ( $POS == 43 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYTHREE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYTHREE
        END_IF
    ELSE IF ( $POS == 44 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYFOUR = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYFOUR
        END_IF
    ELSE IF ( $POS == 45 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYFIVE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYFIVE
        END_IF
    ELSE IF ( $POS == 46 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYSIX = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYSIX
        END_IF
    ELSE IF ( $POS == 47 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYSEVEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYSEVEN
        END_IF
    ELSE IF ( $POS == 48 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYEIGHT = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYEIGHT
        END_IF
    ELSE IF ( $POS == 49 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FORTYNINE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FORTYNINE
        END_IF
    ELSE IF ( $POS == 50 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTY = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTY
        END_IF
    ELSE IF ( $POS == 51 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYONE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYONE
        END_IF
    ELSE IF ( $POS == 52 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYTWO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYTWO
        END_IF
    ELSE IF ( $POS == 53 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYTHREE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYTHREE
        END_IF
    ELSE IF ( $POS == 54 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYFOUR = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYFOUR
        END_IF
    ELSE IF ( $POS == 55 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYFIVE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYFIVE
        END_IF
    ELSE IF ( $POS == 56 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYSIX = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYSIX
        END_IF
    ELSE IF ( $POS == 57 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYSEVEN = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYSEVEN
        END_IF
    ELSE IF ( $POS == 58 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYEIGHT = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYEIGHT
        END_IF
    ELSE IF ( $POS == 59 ) THEN 
        IF ($WRITE == TRUE) THEN
            $FIFTYNINE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $FIFTYNINE
        END_IF
    ELSE IF ( $POS == 60 ) THEN 
        IF ($WRITE == TRUE) THEN
            $SIXTY = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $SIXTY
        END_IF
    ELSE IF ( $POS == 61 ) THEN 
        IF ($WRITE == TRUE) THEN
            $SIXTYONE = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $SIXTYONE
        END_IF
    ELSE IF ( $POS == 62 ) THEN 
        IF ($WRITE == TRUE) THEN
            $SIXTYTWO = $ARRAYINPUT
        ELSE
            $ARRAYOUTPUT = $SIXTYTWO
        END_IF
    END_IF
END_FUNCTION

FUNCTION SETARRAY()
    $COLUMN = 1
    $WRITE = TRUE
    WHILE ($COLUMN <= $MAX)
        $ROW = 1
        WHILE ($ROW <= 3)
            $POS = (((($ROW-1)*$MAX)+$COLUMN)-1)
            IF ($COLUMN > $ROW) THEN
                $ARRAYINPUT = 1
            ELSE
                $ARRAYINPUT = 0
            END_IF
            ARRAY()
            $ROW = ($ROW + 1)
        END_WHILE
        $COLUMN = ($COLUMN + 1)
    END_WHILE
END_FUNCTION


FUNCTION READARRAY()
    $COLUMN = 1
    $WRITE = FALSE
    WHILE ($COLUMN <= $MAX)
        $ROW = 1
        WHILE ($ROW <= 3)
            $POS = (((($ROW-1)*$MAX)+$COLUMN)-1)
            STRING Pos: 
            $INPUT = $POS
            TRANSLATE_INT()
            ARRAY()
            STRING Array output: 
            $INPUT = $ARRAYOUTPUT
            TRANSLATE_INT()
            $ROW = ($ROW + 1)
        END_WHILE
        $COLUMN = ($COLUMN + 1)
    END_WHILE
END_FUNCTION

FUNCTION ENSURE_CAPS_OFF()
    IF ($_CAPSLOCK_ON == TRUE) THEN
        CAPSLOCK
    END_IF
END_FUNCTION

FUNCTION stop_game()
    LED_R
    $RUNNING = FALSE
END_FUNCTION

FUNCTION check_input()
    $changed = FALSE
    ENTER
    ENSURE_CAPS_OFF()
    STRING Take your pebbles
    WHILE( $changed == FALSE)
        IF ($CAPS != $_CAPSLOCK_ON) THEN
            $CAPS = $_CAPSLOCK_ON
            $TAKKEN = 1
            $changed = TRUE
        ELSE IF ($SCROLL != $_SCROLLLOCK_ON) THEN
            $SCROLL = $_SCROLLLOCK_ON
            $TAKKEN = 2
            $changed = TRUE
        ELSE IF ($NUM != $_NUMLOCK_ON)
            $NUM = $_NUMLOCK_ON
            $TAKKEN = 3
            $changed = TRUE
        END_IF
    END_WHILE
END_FUNCTION

FUNCTION pebbles_left()
    ENTER
    ENSURE_CAPS_OFF()
    STRING pebble left: 
    $INPUT = $PEBBLES
    TRANSLATE_INT()
END_FUNCTION


FUNCTION run()
    check_input()
    ENSURE_CAPS_OFF()
    IF ($PEBBLES <= $TAKKEN) THEN
        ENTER
        STRING I have won!
        ENTER
        STRING Commiserations better luck next time.
        stop_game()
    ELSE
        $PEBBLES = ($PEBBLES - $TAKKEN)
        pebbles_left()
        REM our move
        $WRITE = FALSE
        $MOVE = 0
        $ROW = 1
        WHILE ($ROW <= 3)
            $POS = (((($ROW -1)*$MAX)+$PEBBLES)-1)
            REM TEST
            STRING pos: 
            $INPUT = $POS
            TRANSLATE_INT()
            STRING 17: 
            $INPUT = $SEVENTEEN
            TRANSLATE_INT()
            REM END TEST

            ARRAY()

            REM TEST
            STRING Array output: 
            $INPUT = $ARRAYOUTPUT
            TRANSLATE_INT()
            REM END TEST

            IF ($ARRAYOUTPUT == 1) THEN
                $MOVE = $ROW
                $LASTPOS = $POS
            END_IF
            $ROW = ($ROW + 1)
        END_WHILE
        IF (($MOVE == 0) || (($PEBBLES - $MOVE) == 0)) THEN
            ENTER
            STRING Congratulations you have won!
            ENTER
            STRING I will learn from my mistake.
            $WRITE = TRUE
            $POS = $LASTPOS
            $ARRAYINPUT = 0
            ARRAY()
            stop_game()
        ELSE
            $PEBBLES = ($PEBBLES - $MOVE)
            ENTER
            STRING I take: 
            $INPUT = $MOVE
            TRANSLATE_INT()
            pebbles_left()
        END_IF
    END_IF
END_FUNCTION

FUNCTION play_game()
    STRINGLN generating brain please hold
    SETARRAY()
    REM READARRAY()
    WHILE TRUE
        ENSURE_CAPS_OFF()
        $CAPS = $_CAPSLOCK_ON
        $SCROLL = $_SCROLLLOCK_ON
        $NUM = $_NUMLOCK_ON
        $PEBBLES = $MAX
        $TAKKEN = 0
        LED_G
        ENTER
        STRINGLN Welcome to the game of NIM
        STRINGLN You vs Me
        STRINGLN You move first, the object of the game is not to take the last pebble
        STRINGLN Caps lock = 1
        STRINGLN Scroll lock = 2
        STRINGLN and Num lock = 3
        ENTER
        pebbles_left()
        WHILE ($RUNNING == TRUE) 
            run()
        END_WHILE
        DELAY 1000
        ENTER
        STRING Press CAPS to play again.
        WAIT_FOR_CAPS_CHANGE
        $RUNNING = TRUE
        DELAY 100
    END_WHILE 
END_FUNCTION

BUTTON_DEF
    stop_game()
END_BUTTON

play_game()